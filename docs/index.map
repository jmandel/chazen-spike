{"version":3,"sources":["index.js"],"names":["console","log","QUEUE_DELAY","FADE_TIME","module","hot","accept","location","reload","window","audioCtx","AudioContext","mapped","Array","keys","map","k","padStart","o","fetch","then","or","arrayBuffer","buffer","Promise","resolve","reject","decodeAudioData","decodedData","all","soundBuffers","startTime","currentTime","duration","Math","min","apply","b","durationMs","currentIteration","plays","ensureNextSegment","now","which","absoluteOffset","nextSegmentTime","ceil","source","createBufferSource","gainNode","createGain","connect","destination","gain","setValueAtTime","start","filter","p","forEach","stop","concat","enqueue","iteration","maxValue","offset","floor","exponentialRampToValueAtTime","setTimeout","setInterval"],"mappings":"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","file":"index.map","sourceRoot":"..","sourcesContent":["console.log(\"Start\");\n\nconst QUEUE_DELAY = 0.05;\nconst FADE_TIME = 0.1;\n\nif (module.hot) {\n  module.hot.accept(function () {\n    location.reload();\n  });\n}\n\nwindow.audioCtx = new window.AudioContext();\n\nvar mapped = [...Array(10).keys()]\n  .map(k => (\"\" + (k + 1)).padStart(2, \"0\"))\n  .map(k => `sitting/sitting.${k}.ogg`)\n  .map(o => fetch(o).then(or => or.arrayBuffer()).then(buffer => {\n    return new Promise((resolve, reject) => {\n      audioCtx.decodeAudioData(buffer, function (decodedData) {\n        resolve(decodedData);\n      });\n    })\n  }))\n\nPromise.all(mapped).then(soundBuffers => {\n\n  console.log(soundBuffers);\n  var startTime = audioCtx.currentTime;\n  window.soundBuffers = soundBuffers\n\n  var duration = Math.min.apply(null, soundBuffers.map(b => b.duration));\n  console.log(\"midur\", duration)\n  var durationMs = duration * 1000;\n  var currentIteration = 0;\n\n  var plays = [];\n\n  enqueue(currentIteration);\n  setTimeout(() => (setInterval(() => {\n    ensureNextSegment(currentIteration);\n  }, durationMs * .50)), 100)\n\n  function nextSegmentFrom(which) {\n    return which;\n  }\n\n  function ensureNextSegment() {\n    var now = audioCtx.currentTime + QUEUE_DELAY;\n    var absoluteOffset = (now - startTime);\n    var nextSegmentTime = startTime + duration * Math.ceil(absoluteOffset / duration);\n\n    var source = audioCtx.createBufferSource();\n    console.log(\"Ensure next\", currentIteration, nextSegmentTime);\n    source.buffer = soundBuffers[nextSegmentFrom(currentIteration)];\n    var gainNode = audioCtx.createGain();\n    source.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n    gainNode.gain.setValueAtTime(1.0, audioCtx.currentTime);\n    source.start(nextSegmentTime, 0, duration);\n    plays.filter(p => p[0] == nextSegmentTime).forEach(p => p[2].stop())\n    plays = plays.filter(p => p[0] !== nextSegmentTime || p[0] < now - duration).concat([\n      [nextSegmentTime, gainNode, source]\n    ]);\n  }\n\n  function enqueue(iteration) {\n    var source = audioCtx.createBufferSource();\n    currentIteration = iteration;\n    source.buffer = soundBuffers[iteration];\n    var gainNode = audioCtx.createGain();\n    source.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n    gainNode.gain.setValueAtTime(0.0001, audioCtx.currentTime);\n    console.log(\"gmx\", gainNode.gain.maxValue)\n\n    var now = audioCtx.currentTime;\n    var absoluteOffset = (now - startTime);\n    var offset = absoluteOffset - duration * Math.floor(absoluteOffset / duration);\n\n    gainNode.gain.exponentialRampToValueAtTime(1.0, now + QUEUE_DELAY + FADE_TIME);\n    source.start(now + QUEUE_DELAY, offset + QUEUE_DELAY, duration - offset - QUEUE_DELAY);\n    console.log(plays)\n    plays.forEach(p => p[1].gain.exponentialRampToValueAtTime(0.0001, now + QUEUE_DELAY + FADE_TIME) && p[2].stop(now + QUEUE_DELAY + 2 * FADE_TIME));\n    plays = [\n      [now + QUEUE_DELAY, gainNode, source]\n    ];\n    ensureNextSegment();\n  }\n\n  window.enqueue = enqueue;\n})"]}